# import the necessary packages
import time
from collections import deque
import numpy as np
import imutils
from imutils.video import VideoStream
import cv2
import os
import pandas as pd

usingPiCamera = True;

# define the lower and upper boundaries of the "green"
# ball in the HSV color space
greenLower = (29, 86, 6)
greenUpper = (64, 255, 255)

# initialize the list of tracked points, the frame counter,
# and the coordinate deltas
pts = deque(maxlen=32)
counter = 0
(dX, dY) = (0, 0)
direction = ""

print("->VISION PROGRAM STARTED")
print("->LOADING NEURAL NETWORK PREDICTIONS")
#Load the predictions file
predictions = pd.read_csv('predictions.csv')
frame = pd.DataFrame(predictions)

#Saves the predictions data on list 
rna_inputs = []
rna_outputs = []
for i in range(0,81):
        rna_inputs.append("{},{},{},{}".format(frame['x1'][i], frame['x2'][i], frame['x3'][i], frame['x4'][i]))
        rna_outputs.append(int(frame['y'][i]))

print("->PREDICTIONS LOADED")
print("->STARTING CAMERA")
camera = VideoStream(src=0, usePiCamera=usingPiCamera, resolution=(320, 240),framerate=32).start()
time.sleep(2.0)
print("->CAMERA STARTED")

while True:
        #Counts the time of camera read
        timeCount = 0
        #Object distance received to navigator
        o_dist = 0
        #Escape distance sended from navigator
        r_dist = 0
        #Says if the object distance file has readed
        infileReaded = False

        #Wait for object distance file
        print("\n->WAITING FOR NAVIGATIOR REQUEST")
        while infileReaded == False:
                try:
                        #opens and reads the object distance file
                        infile = open("odist.txt", 'r')
                        o_dist = int(infile.readline())
                        #close and delete the file
                        infile.close()
                        os.remove("odist.txt")

                        #Creates escape distance file from navigator
                        outfile = open("rdist.txt", 'w')
                        infileReaded = True
                except:
                        infileReaded = False

        print("->STARTING MOVEMENT READ")
        # keep looping
        while timeCount <= 1.0:
                try:
                        # grab the current frame
                        frame = camera.read()

                        # resize the frame, blur it, and convert it to the HSV
                        # color space
                        if not usingPiCamera:
                                frame = imutils.resize(frame, width=320)
                        # blurred = cv2.GaussianBlur(frame, (11, 11), 0)
                        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

                        # construct a mask for the color "green", then perform
                        # a series of dilations and erosions to remove any small
                        # blobs left in the mask
                        mask = cv2.inRange(hsv, greenLower, greenUpper)
                        mask = cv2.erode(mask, None, iterations=2)
                        mask = cv2.dilate(mask, None, iterations=2)

                        # find contours in the mask and initialize the current
                        # (x, y) center of the ball
                        cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL,
                                cv2.CHAIN_APPROX_SIMPLE)[-2]
                        center = None

                        # only proceed if at least one contour was found
                        if len(cnts) > 0:
                                # find the largest contour in the mask, then use
                                # it to compute the minimum enclosing circle and
                                # centroid
                                c = max(cnts, key=cv2.contourArea)
                                ((x, y), radius) = cv2.minEnclosingCircle(c)
                                M = cv2.moments(c)
                                center = (int(M["m10"] / M["m00"]), int(M["m01"] / M["m00"]))

                                # only proceed if the radius meets a minimum size
                                if radius > 10:
                                        pts.appendleft(center)

                                # loop over the set of tracked points
                                for i in np.arange(1, len(pts)):
                                        # if either of the tracked points are None, ignore
                                        # them
                                        if pts[i - 1] is None or pts[i] is None:
                                                continue

                                        # check to see if enough points have been accumulated in
                                        # the buffer
                                        if counter >= 10 and i == 1 and pts[-10] is not None:
                                                # compute the difference between the x and y
                                                # coordinates and re-initialize the direction
                                                # text variables
                                                dX = pts[-10][0] - pts[i][0]
                                                dY = pts[-10][1] - pts[i][1]
                                                (dirX, dirY) = ("", "")

                                                # ensure there is significant movement in the
                                                # x-direction
                                                if np.abs(dX) > 10:
                                                        dirX = "Right" if np.sign(dX) == 1 else "Left"
                                                # y-direction
                                                if np.abs(dY) > 10:
                                                        dirY = "Leaving" if np.sign(dY) == 1 else "Approaching"

                                                # handle when both directions are non-empty
                                                if dirX != "" and dirY != "":
                                                        direction = "{}-{}".format(dirY, dirX)

                                                # otherwise, only one direction is non-empty
                                                elif dirX != "" and dirY == "" or dirX == "" and dirY != "":
                                                        direction = dirX if dirX != "" else dirY

                                                else:
                                                        direction = "Stopped"

                                                #DADOS DA REDE ----------------- PASSAR PRO RPI
                                                (dirXinput, dirYinput, posXinput, odistInput) = (0.5, 0.5, 0.5, 0.5)

                                                if dirX == "Left":
                                                        dirXinput = 0.0
                                                elif dirX == "Right":
                                                        dirXinput = 1.0

                                                if dirY == "Leaving":
                                                        dirYinput = 0.0
                                                elif dirY == "Approaching":
                                                        dirYinput = 1.0

                                                if center[0] >= 0 and center[0] <= 106:
                                                        posXinput = 0.0
                                                elif center[0] >= 107 and center[0] <= 213:
                                                        posXinput = 0.5
                                                elif center[0] >= 214 and center[0] <= 320:
                                                        posXinput = 1.0

                                                if o_dist < 20:
                                                        odistInput = 0.0
                                                elif o_dist < 30:
                                                        odistInput = 0.5
                                                elif o_dist < 40:
                                                        odistInput = 1.0

                                                print(direction, center[0])
                                                #------------------------------------------------
                        counter += 1
                except:
                        infileReaded = False
                timeCount += 0.05
                time.sleep(0.05)

        print("->MOVEMENT READED")

        #Try predict the escape distance if an object has detected
        try:
                print("->PREDICTING ESCAPE DISTANCE")

                inputs = "{},{},{},{}".format(dirXinput, dirYinput, posXinput, odistInput)
                for i in range(0,81):
                        if rna_inputs[i] == inputs:
                                r_dist = rna_outputs[i]
                                break
                print("\tx1 = {} x2 = {} x3 = {} x4 = {} -> y = {}".format(dirXinput, dirYinput, posXinput, odistInput, r_dist))
        #if object has not detected
        except:
                print("\tOBJECT UNDETECTED -> y = {}".format(r_dist))

        print("-> ANSWERING NAVIGATOR REQUEST")
        outfile.write('{}'.format(r_dist))
        outfile.close()


# cleanup the camera and close any open windows
camera.stop()
